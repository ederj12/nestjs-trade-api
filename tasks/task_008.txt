# Task ID: 8
# Title: Transaction Processing Service
# Status: pending
# Dependencies: 4, 6
# Priority: high
# Description: Implement service for processing stock purchase transactions
# Details:
Create a service to process stock purchase transactions. Implement price validation logic (within 2% of current price). Handle transaction recording and portfolio updates atomically. Implement retry mechanism for failed transactions. Use database transactions to ensure data consistency.

# Test Strategy:
Write unit tests for price validation logic. Test transaction processing with various scenarios. Verify portfolio updates after transactions.

# Subtasks:
## 1. Design Transaction Processing Service structure and DTOs [done]
### Dependencies: None
### Description: Define the structure for the transaction processing service in the core module. Create DTOs for transaction requests and responses. Plan controller, service, repository, and test structure. Ensure all code is placed in the core module.
### Details:
- Design request and response DTOs for stock purchase transactions (fields: userId, stockSymbol, quantity, price, etc.)
- Plan controller endpoints (e.g., POST /transactions)
- Define service and repository method signatures
- Outline integration and unit test structure
- Ensure all files are placed in the core module
- Prepare for DB transaction handling using NestJS interceptors

## 2. Implement Transaction Controller and Endpoints [done]
### Dependencies: None
### Description: Create a controller in the core module for transaction processing. Implement POST /transactions endpoint for stock purchase. Integrate with the service layer. Use DTOs for request/response validation. Prepare for DB transaction handling via interceptor.
### Details:
- Create TransactionController in core module
- Implement POST /transactions endpoint
- Use request/response DTOs for validation
- Inject TransactionService
- Prepare for DB transaction handling using NestJS interceptor
- Return appropriate HTTP status codes and error messages
- Add Swagger/OpenAPI decorators if needed

## 3. Implement Transaction Service with Price Validation and Retry Logic [done]
### Dependencies: None
### Description: Create a TransactionService in the core module. Implement price validation logic (must be within 2% of current price). Implement retry mechanism for failed transactions. Integrate with repository and portfolio update logic. Use database transactions for atomicity.
### Details:
- Create TransactionService in core
- Implement method to process stock purchase (validate price, update portfolio, record transaction)
- Price must be within 2% of current price (fetch from StockRepository/StockService)
- Implement retry logic for transient failures (e.g., DB errors)
- Use TypeORM transactions for atomicity
- Integrate with PortfolioService for portfolio updates
- Throw appropriate exceptions for business rule violations
- Prepare for DB transaction handling using NestJS interceptor

## 4. Implement Transaction Repository Methods [done]
### Dependencies: None
### Description: Extend the TransactionRepository in the core module to support transaction recording and retrieval. Ensure methods support atomic operations and are compatible with TypeORM transactions.
### Details:
- Add methods to TransactionRepository for saving and retrieving transactions
- Ensure save method supports atomic operation within a transaction
- Add methods for querying transactions by user, stock, or date if needed
- Integrate with TransactionService
- Prepare for use with NestJS transaction interceptor

## 5. Implement Database Transaction Interceptor [done]
### Dependencies: None
### Description: Create a NestJS interceptor in the core module to handle database transactions for transaction processing endpoints. Ensure all operations in the transaction flow are atomic and rolled back on error.
### Details:
- Implement a NestJS interceptor for DB transaction management
- Apply interceptor to transaction processing endpoints/controllers
- Ensure all service/repository operations are executed within a transaction context
- Roll back transaction on error/exception
- Log transaction boundaries and errors for observability
- Add unit/integration tests for transaction boundaries and rollback scenarios

## 6. Write Unit and Integration Tests for Transaction Processing [done]
### Dependencies: None
### Description: Develop comprehensive unit and integration tests for all transaction processing logic in the core module. Cover edge cases, error handling, and business rules.
### Details:
- Write unit tests for TransactionService (price validation, retry logic, error handling)
- Write integration tests for TransactionController (end-to-end transaction flow)
- Test edge cases: price out of range, insufficient funds, concurrent transactions, DB errors
- Test rollback and atomicity via transaction interceptor
- Use mocks for external dependencies (e.g., stock price service)
- Ensure high code coverage and robust error reporting

