# Task ID: 4
# Title: Stock Caching Mechanism
# Status: done
# Dependencies: 2, 3
# Priority: medium
# Description: Implement caching system for stock data considering 5-minute price updates
# Details:
Create a caching service that stores stock data in memory and/or database. Implement a mechanism to refresh stock prices every 5 minutes. Use NestJS cache module or implement a custom solution. Ensure cache invalidation works correctly. Add background job to periodically update stock prices from the vendor API.

# Test Strategy:
Test cache hit/miss scenarios. Verify cache invalidation after 5 minutes. Measure performance improvements with caching enabled vs. disabled.

# Subtasks:
## 1. Design and implement the StockCacheService class [done]
### Dependencies: None
### Description: Create a service class that will handle caching stock data with appropriate interfaces and data structures
### Details:
1. Create a `StockCacheService` class in the appropriate module
2. Define interfaces for stock data (e.g., `CachedStockData` interface with price, timestamp, etc.)
3. Implement methods for getting, setting, and checking stock data in the cache
4. Set up in-memory cache storage using Map or NestJS CacheModule
5. Add configuration for cache TTL (time-to-live) of 5 minutes
6. Implement basic logging for cache hits/misses
7. Test the service with unit tests to verify basic caching functionality works

## 2. Implement database persistence layer for cached stock data [done]
### Dependencies: 4.1
### Description: Create a database schema and repository to persist cached stock data for resilience
### Details:
1. Design database schema for cached stock data (table with stock symbol, price, timestamp, etc.)
2. Create entity classes and repository for stock cache data
3. Extend the StockCacheService to read from database when in-memory cache misses
4. Implement methods to persist cache updates to database
5. Add transaction support for database operations
6. Implement cache warming on application startup from database
7. Test database persistence with integration tests

## 3. Create background job for stock price updates [done]
### Dependencies: 4.1, 4.2
### Description: Implement a scheduled job that runs every 5 minutes to fetch fresh stock data from vendor API
### Details:
1. Create a `StockUpdateJob` class using NestJS scheduling (or bull queue)
2. Configure the job to run every 5 minutes
3. Implement the job to fetch latest stock prices from vendor API
4. Add error handling and retry logic for API failures
5. Implement logging for job execution and errors
6. Add metrics collection for job performance
7. Test the job execution with mock vendor API

## 4. Implement cache invalidation and refresh mechanism [done]
### Dependencies: 4.1, 4.2, 4.3
### Description: Create logic to invalidate and refresh cached stock data based on age and updates
### Details:
1. Implement cache invalidation strategy (time-based and manual trigger)
2. Add method to check if cached data is stale (older than 5 minutes)
3. Create refresh mechanism that updates only stale data
4. Implement partial cache updates (update only changed stocks)
5. Add concurrency control for cache updates
6. Implement cache statistics (hit rate, miss rate, etc.)
7. Test cache invalidation with various scenarios

## 5. Integrate cache service with stock API endpoints [done]
### Dependencies: 4.1, 4.2, 4.3, 4.4
### Description: Connect the caching mechanism to the existing stock API endpoints to serve cached data
### Details:
1. Modify existing stock API controllers to use the StockCacheService
2. Implement cache-first strategy for stock data retrieval
3. Add cache headers to API responses (ETag, Cache-Control)
4. Implement conditional requests support (If-None-Match)
5. Add endpoint to manually trigger cache refresh for testing
6. Create admin endpoint to view cache statistics
7. Perform end-to-end testing of the complete caching system
8. Load test the system to verify performance improvements

